# Generated by Django 5.2.3 on 2025-09-08 10:58

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('admin', 'Administrator'), ('doctor', 'Doctor'), ('nurse', 'Nurse'), ('pharmacist', 'Pharmacist'), ('lab_tech', 'Lab Technician'), ('radiologist', 'Radiologist'), ('patient', 'Patient'), ('receptionist', 'Receptionist'), ('procurement_officer', 'Procurement Officer')], default='patient', max_length=20)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female')], max_length=10, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='clinical_app_user_set', related_query_name='clinical_app_user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='clinical_app_user_permissions_set', related_query_name='clinical_app_user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('appointment_date', models.DateTimeField(blank=True, null=True)),
                ('appointment_time', models.DateTimeField(blank=True, null=True)),
                ('reason_for_visit', models.TextField()),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('rescheduled', 'Rescheduled'), ('no_show', 'No Show')], default='scheduled', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-appointment_date'],
            },
        ),
        migrations.CreateModel(
            name='Bed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bed_number', models.CharField(max_length=20)),
                ('is_occupied', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='ImagingType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='LabTestCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Lab Test Categories',
            },
        ),
        migrations.CreateModel(
            name='Medication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('strength', models.CharField(blank=True, max_length=50, null=True)),
                ('form', models.CharField(blank=True, max_length=50, null=True)),
                ('manufacturer', models.CharField(blank=True, max_length=100, null=True)),
                ('price_per_unit', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('stock_quantity', models.IntegerField(default=0, help_text='Current quantity in stock')),
                ('reorder_level', models.IntegerField(default=10, help_text='Minimum quantity to trigger reorder')),
            ],
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=100, null=True)),
                ('last_name', models.CharField(blank=True, max_length=100, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=1, null=True)),
                ('patient_id', models.CharField(editable=False, max_length=20, unique=True)),
                ('blood_group', models.CharField(blank=True, choices=[('A+', 'A+'), ('A-', 'A-'), ('B+', 'B+'), ('B-', 'B-'), ('AB+', 'AB+'), ('AB-', 'AB-'), ('O+', 'O+'), ('O-', 'O-')], max_length=5, null=True)),
                ('emergency_contact_name', models.CharField(blank=True, max_length=100, null=True)),
                ('emergency_contact_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('allergies', models.TextField(blank=True, help_text='List known allergies (e.g., medications, food)', null=True)),
                ('pre_existing_conditions', models.TextField(blank=True, help_text='List any chronic conditions', null=True)),
                ('registration_date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('category', models.CharField(choices=[('consultation', 'Consultation'), ('lab', 'Laboratory'), ('pharmacy', 'Pharmacy'), ('procedure', 'Procedure'), ('ward', 'Ward Admission'), ('other', 'Other')], default='other', max_length=50)),
                ('description', models.TextField(blank=True, null=True)),
                ('price', models.DecimalField(decimal_places=2, help_text='Default price for the service', max_digits=10)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name_plural': 'Hospital Services',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Ward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('ward_type', models.CharField(choices=[('general', 'General'), ('private', 'Private'), ('icu', 'Intensive Care Unit'), ('maternity', 'Maternity'), ('pediatric', 'Pediatric'), ('oncology', 'Oncology')], default='general', max_length=50)),
                ('capacity', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('user', models.OneToOneField(limit_choices_to={'user_type': 'doctor'}, on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('specialization', models.CharField(max_length=100)),
                ('medical_license_number', models.CharField(max_length=50, unique=True)),
                ('years_of_experience', models.IntegerField(blank=True, default=0, help_text='Years of experience as a doctor.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='LabTechnician',
            fields=[
                ('user', models.OneToOneField(limit_choices_to={'user_type': 'lab_tech'}, on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('license_number', models.CharField(help_text='Professional license number for the lab technician.', max_length=50, unique=True)),
                ('specialization', models.CharField(blank=True, choices=[('Phlebotomy', 'Phlebotomy'), ('Microbiology', 'Microbiology'), ('Clinical Chemistry', 'Clinical Chemistry'), ('Hematology', 'Hematology'), ('Pathology', 'Pathology'), ('Virology', 'Virology'), ('Molecular Biology', 'Molecular Biology'), ('Other', 'Other')], help_text='Area of expertise or specialization.', max_length=100, null=True)),
                ('shift_info', models.CharField(blank=True, choices=[('Morning', 'Morning Shift'), ('Afternoon', 'Afternoon Shift'), ('Full Day', 'Full Day Shift'), ('Night', 'Night Shift')], max_length=50, null=True)),
                ('lab_section_assigned', models.CharField(blank=True, help_text='The specific lab section they primarily work in.', max_length=100, null=True)),
                ('qualifications', models.TextField(blank=True, help_text='Educational background, certifications, and other qualifications.', null=True)),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Inactive', 'Inactive'), ('On Leave', 'On Leave')], default='Active', help_text='Current employment status of the lab technician.', max_length=20)),
            ],
            options={
                'verbose_name': 'Lab Technician',
                'verbose_name_plural': 'Lab Technicians',
                'ordering': ['user__last_name', 'user__first_name'],
            },
        ),
        migrations.CreateModel(
            name='Pharmacist',
            fields=[
                ('user', models.OneToOneField(limit_choices_to={'user_type': 'pharmacist'}, on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('pharmacy_license_number', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('years_of_experience', models.IntegerField(blank=True, default=0, help_text='Years of experience in pharmacy.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ProcurementOfficer',
            fields=[
                ('user', models.OneToOneField(limit_choices_to={'user_type': 'procurement_officer'}, on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('employee_id', models.CharField(blank=True, max_length=50, null=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Radiologist',
            fields=[
                ('user', models.OneToOneField(limit_choices_to={'user_type': 'radiologist'}, on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('medical_license_number', models.CharField(help_text='Medical license number for the radiologist.', max_length=50, unique=True)),
                ('sub_specialization', models.CharField(blank=True, choices=[('Diagnostic Radiology', 'Diagnostic Radiology'), ('Interventional Radiology', 'Interventional Radiology'), ('Pediatric Radiology', 'Pediatric Radiology'), ('Neuroradiology', 'Neuroradiology'), ('Musculoskeletal Radiology', 'Musculoskeletal Radiology'), ('Cardiothoracic Radiology', 'Cardiothoracic Radiology'), ('Breast Imaging', 'Breast Imaging'), ('Nuclear Medicine', 'Nuclear Medicine'), ('Other', 'Other')], help_text='Specific area of radiology expertise (e.g., Neuroradiology).', max_length=100, null=True)),
                ('date_hired', models.DateField()),
                ('on_call_status', models.BooleanField(default=False, help_text='Indicates if the radiologist is currently on-call.')),
                ('preferred_modalities', models.JSONField(blank=True, help_text="List of preferred imaging modalities (e.g., ['MRI', 'CT', 'X-ray']).", null=True)),
                ('qualifications', models.TextField(blank=True, help_text='Medical degrees, board certifications, and other qualifications.', null=True)),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Inactive', 'Inactive'), ('On Leave', 'On Leave')], default='Active', help_text='Current employment status of the radiologist.', max_length=20)),
            ],
            options={
                'verbose_name': 'Radiologist',
                'verbose_name_plural': 'Radiologists',
                'ordering': ['user__last_name', 'user__first_name'],
            },
        ),
        migrations.CreateModel(
            name='Receptionist',
            fields=[
                ('user', models.OneToOneField(limit_choices_to={'user_type': 'receptionist'}, on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('shift_info', models.CharField(blank=True, choices=[('Morning', 'Morning Shift'), ('Afternoon', 'Afternoon Shift'), ('Full Day', 'Full Day Shift'), ('Night', 'Night Shift')], help_text="Information about the receptionist's working shift.", max_length=50, null=True)),
                ('assigned_desk', models.CharField(blank=True, help_text='The desk or area they are typically assigned to.', max_length=50, null=True)),
            ],
            options={
                'verbose_name': 'Receptionist',
                'verbose_name_plural': 'Receptionists',
                'ordering': ['user__last_name', 'user__first_name'],
            },
        ),
        migrations.CreateModel(
            name='ActivityLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.CharField(choices=[('CREATE', 'Create'), ('UPDATE', 'Update'), ('DELETE', 'Delete'), ('LOGIN', 'Login'), ('LOGOUT', 'Logout'), ('VIEW', 'View'), ('PASSWORD_CHANGE', 'Password Change'), ('OTHER', 'Other')], help_text='Type of action performed', max_length=50)),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='When the action occurred')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address of the user', null=True)),
                ('model_name', models.CharField(blank=True, help_text="Name of the model affected (e.g., 'Patient', 'Doctor')", max_length=100, null=True)),
                ('object_id', models.CharField(blank=True, help_text='ID of the object affected', max_length=255, null=True)),
                ('description', models.TextField(blank=True, help_text='Detailed description of the action')),
                ('changes', models.JSONField(blank=True, help_text="JSON representation of changes (e.g., {'field': 'old_value' -> 'new_value'})", null=True)),
                ('user', models.ForeignKey(blank=True, help_text='User who performed the action (can be null if system action)', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Activity Log',
                'verbose_name_plural': 'Activity Logs',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="The official name of the department (e.g., 'Pediatrics', 'Radiology').", max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text="A brief overview of the department's functions and scope.", null=True)),
                ('department_type', models.CharField(choices=[('Clinical', 'Clinical Services'), ('Administrative', 'Administrative Services'), ('Diagnostic', 'Diagnostic Services'), ('Support', 'Support Services'), ('Emergency', 'Emergency Services'), ('Surgical', 'Surgical Services')], default='Clinical', help_text='Category of the department (e.g., Clinical, Administrative).', max_length=50)),
                ('contact_phone', models.CharField(blank=True, help_text='Primary phone number for direct departmental contact.', max_length=20, null=True)),
                ('contact_email', models.EmailField(blank=True, help_text='Primary email address for the department.', max_length=254, null=True)),
                ('location', models.CharField(blank=True, help_text="Physical location within the hospital (e.g., 'Ground Floor, East Wing', 'Building C, Level 2').", max_length=255, null=True)),
                ('floor_number', models.IntegerField(blank=True, help_text='The floor number where the department is located.', null=True)),
                ('staff_count', models.IntegerField(blank=True, help_text='Approximate total number of staff members in the department.', null=True)),
                ('annual_budget', models.DecimalField(decimal_places=2, default=0.0, help_text='The allocated annual budget for this department. Useful for procurement tracking.', max_digits=12)),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this department is currently operational and active.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('head_of_department', models.ForeignKey(blank=True, help_text='The lead or head of this department.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='departments_headed', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Department',
                'verbose_name_plural': 'Departments',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Encounter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('encounter_date', models.DateTimeField(auto_now_add=True)),
                ('encounter_type', models.CharField(choices=[('outpatient', 'Outpatient'), ('inpatient', 'Inpatient'), ('emergency', 'Emergency'), ('telemedicine', 'Telemedicine')], default='outpatient', max_length=20)),
                ('admission_date', models.DateTimeField(blank=True, null=True)),
                ('discharge_date', models.DateTimeField(blank=True, null=True)),
                ('appointment', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='encounter', to='clinical_app.appointment')),
                ('bed', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='clinical_app.bed')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='encounters', to='clinical_app.patient')),
                ('ward', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='clinical_app.ward')),
                ('doctor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='encounters', to='clinical_app.doctor')),
            ],
        ),
        migrations.CreateModel(
            name='Diagnosis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('diagnosis_date', models.DateTimeField(auto_now_add=True)),
                ('icd10_code', models.CharField(blank=True, max_length=20, null=True)),
                ('diagnosis_text', models.TextField()),
                ('is_primary', models.BooleanField(default=False)),
                ('diagnosis_status', models.CharField(choices=[('provisional', 'Provisional'), ('final', 'Final'), ('differential', 'Differential'), ('ruled_out', 'Ruled Out'), ('resolved', 'Resolved')], default='provisional', help_text='Current status of the diagnosis (e.g., provisional, final).', max_length=20)),
                ('diagnosed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='diagnoses_made_by_set', to=settings.AUTH_USER_MODEL)),
                ('encounter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='diagnoses', to='clinical_app.encounter')),
            ],
            options={
                'verbose_name_plural': 'Diagnoses',
            },
        ),
        migrations.CreateModel(
            name='ClinicalNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chief_complaint', models.TextField(help_text="Patient's primary reason for the visit (in their own words if possible).", verbose_name='Chief Complaint')),
                ('history_of_present_illness', models.TextField(blank=True, help_text='Detailed chronological description of the chief complaint.', null=True, verbose_name='History of Present Illness (HPI)')),
                ('review_of_systems', models.TextField(blank=True, help_text='Systematic inquiry about symptoms in different body systems.', null=True, verbose_name='Review of Systems (ROS)')),
                ('physical_exam_findings', models.TextField(blank=True, help_text='Objective findings from the physical exam.', null=True, verbose_name='Physical Examination Findings')),
                ('assessment', models.TextField(help_text="Provider's medical impression and differential diagnoses.", verbose_name='Assessment')),
                ('plan', models.TextField(help_text='Proposed diagnostic, therapeutic, and management strategies.', verbose_name='Plan')),
                ('primary_diagnosis', models.CharField(blank=True, max_length=255, null=True, verbose_name='Primary Diagnosis (e.g., ICD-10 code and description)')),
                ('secondary_diagnoses', models.TextField(blank=True, help_text='Comma-separated list of additional diagnoses.', null=True, verbose_name='Secondary Diagnoses')),
                ('interventions_performed', models.TextField(blank=True, help_text='Details of any procedures, therapies, or specific interventions carried out.', null=True, verbose_name='Interventions/Procedures Performed')),
                ('medications_prescribed', models.TextField(blank=True, help_text='List of medications, dosage, frequency, and route.', null=True, verbose_name='Medications Prescribed/Administered')),
                ('follow_up_instructions', models.TextField(blank=True, help_text='Instructions given to the patient for follow-up care.', null=True, verbose_name='Follow-up Instructions')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='The user who created this note.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_clinical_notes', to=settings.AUTH_USER_MODEL)),
                ('encounter', models.OneToOneField(help_text='The encounter this clinical note is associated with.', on_delete=django.db.models.deletion.CASCADE, related_name='clinical_note', to='clinical_app.encounter')),
            ],
            options={
                'verbose_name': 'Clinical Note',
                'verbose_name_plural': 'Clinical Notes',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ImagingRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('requested_date', models.DateTimeField(auto_now_add=True)),
                ('reason_for_exam', models.TextField()),
                ('body_part', models.CharField(blank=True, max_length=100, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('scheduled', 'Scheduled'), ('performed', 'Performed'), ('reported', 'Reported'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('encounter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='imaging_requests', to='clinical_app.encounter')),
                ('requested_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='imaging_requests_made_by_set', to=settings.AUTH_USER_MODEL)),
                ('imaging_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinical_app.imagingtype')),
            ],
        ),
        migrations.CreateModel(
            name='ImagingResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('findings', models.TextField()),
                ('impression', models.TextField()),
                ('recommendations', models.TextField(blank=True, null=True)),
                ('image_files', models.FileField(blank=True, null=True, upload_to='imaging_results/')),
                ('radiologist', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='imaging_results_reported_by_set', to=settings.AUTH_USER_MODEL)),
                ('request', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='result', to='clinical_app.imagingrequest')),
            ],
        ),
        migrations.CreateModel(
            name='LabTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('unit', models.CharField(blank=True, max_length=20, null=True)),
                ('normal_range', models.CharField(blank=True, max_length=50, null=True)),
                ('price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tests', to='clinical_app.labtestcategory')),
            ],
        ),
        migrations.CreateModel(
            name='LabTestRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('requested_date', models.DateTimeField(auto_now_add=True)),
                ('request_notes', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('encounter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lab_test_requests', to='clinical_app.encounter')),
                ('requested_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lab_test_requests_made_by_set', to=settings.AUTH_USER_MODEL)),
                ('tests', models.ManyToManyField(to='clinical_app.labtest')),
            ],
        ),
        migrations.CreateModel(
            name='LabTestResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result_value', models.CharField(blank=True, max_length=255, null=True)),
                ('result_unit', models.CharField(blank=True, max_length=20, null=True)),
                ('normal_range_at_time_of_test', models.CharField(blank=True, max_length=50, null=True)),
                ('is_abnormal', models.BooleanField(default=False)),
                ('comment', models.TextField(blank=True, null=True)),
                ('result_date', models.DateTimeField(auto_now_add=True)),
                ('result_file', models.FileField(blank=True, null=True, upload_to='lab_results/')),
                ('performed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lab_test_results_performed_by_set', to=settings.AUTH_USER_MODEL)),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='clinical_app.labtestrequest')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinical_app.labtest')),
            ],
        ),
        migrations.CreateModel(
            name='MedicalHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recorded_date', models.DateTimeField(auto_now_add=True)),
                ('chief_complaint', models.TextField(blank=True, null=True)),
                ('history_of_present_illness', models.TextField(blank=True, null=True)),
                ('past_medical_history', models.TextField(blank=True, null=True)),
                ('surgical_history', models.TextField(blank=True, null=True)),
                ('family_history', models.TextField(blank=True, null=True)),
                ('social_history', models.TextField(blank=True, null=True)),
                ('medication_history', models.TextField(blank=True, null=True)),
                ('recorded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='medical_history_recorded_by_set', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medical_history_entries', to='clinical_app.patient')),
            ],
        ),
        migrations.CreateModel(
            name='ConsentForm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('consent_type', models.CharField(max_length=100)),
                ('consent_text', models.TextField()),
                ('is_signed', models.BooleanField(default=False)),
                ('signed_date', models.DateTimeField(blank=True, null=True)),
                ('signature_image', models.ImageField(blank=True, null=True, upload_to='consent_signatures/')),
                ('signed_by_staff', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='consents_obtained', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='consent_forms', to='clinical_app.patient')),
            ],
        ),
        migrations.AddField(
            model_name='bed',
            name='patient',
            field=models.OneToOneField(blank=True, help_text='The patient currently assigned to this bed. Null if bed is empty.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='current_bed', to='clinical_app.patient'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='clinical_app.patient'),
        ),
        migrations.CreateModel(
            name='PhysicalExamination',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('examination_date', models.DateTimeField(auto_now_add=True)),
                ('general_appearance', models.TextField(blank=True, null=True)),
                ('head_and_neck', models.TextField(blank=True, null=True)),
                ('chest_and_lungs', models.TextField(blank=True, null=True)),
                ('heart_and_circulation', models.TextField(blank=True, null=True)),
                ('abdomen', models.TextField(blank=True, null=True)),
                ('musculoskeletal', models.TextField(blank=True, null=True)),
                ('neurological', models.TextField(blank=True, null=True)),
                ('skin', models.TextField(blank=True, null=True)),
                ('other_findings', models.TextField(blank=True, null=True)),
                ('encounter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='physical_examinations', to='clinical_app.encounter')),
                ('examined_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='physical_examinations_examined_by_set', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Billing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bill_id', models.CharField(blank=True, editable=False, help_text='Unique identifier for the bill. Auto-generated.', max_length=100, null=True, unique=True)),
                ('description', models.TextField(blank=True, help_text='A custom description for the billed item if no specific service is selected.', null=True)),
                ('quantity', models.DecimalField(blank=True, decimal_places=2, default=1.0, help_text='Quantity of the service or item.', max_digits=10, null=True)),
                ('unit_price', models.DecimalField(blank=True, decimal_places=2, default=0.0, help_text='Price per unit of the service or item.', max_digits=10, null=True)),
                ('total_amount', models.DecimalField(blank=True, decimal_places=2, default=0.0, help_text='The total calculated amount for the bill (quantity * unit_price).', max_digits=10, null=True)),
                ('amount_paid', models.DecimalField(blank=True, decimal_places=2, default=0.0, help_text='The amount paid by the patient or insurance.', max_digits=10, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('paid', 'Paid'), ('partially_paid', 'Partially Paid'), ('cancelled', 'Cancelled')], default='pending', help_text='Current status of the bill.', max_length=20)),
                ('payment_method', models.CharField(blank=True, choices=[('cash', 'Cash'), ('mpesa', 'M-Pesa'), ('card', 'Card'), ('insurance', 'Insurance'), ('bank_transfer', 'Bank Transfer'), ('other', 'Other')], help_text='Method of payment.', max_length=50, null=True)),
                ('transaction_reference', models.CharField(blank=True, help_text='Reference number for the payment transaction.', max_length=255, null=True)),
                ('due_date', models.DateField(blank=True, help_text='Date by which the bill is due.', null=True)),
                ('bill_date', models.DateTimeField(auto_now_add=True, help_text='Date and time when the bill was created.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('billed_by', models.ForeignKey(blank=True, help_text='The user who created this bill.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='billed_transactions', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(blank=True, help_text='The patient associated with this bill.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='billings', to='clinical_app.patient')),
                ('service_rendered', models.ForeignKey(blank=True, help_text="The specific service provided. If null, use 'description'.", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='billed_items', to='clinical_app.service')),
            ],
            options={
                'verbose_name': 'Billing Record',
                'verbose_name_plural': 'Billing Records',
                'ordering': ['patient__last_name', 'patient__first_name', 'bill_date'],
            },
        ),
        migrations.CreateModel(
            name='TreatmentPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('treatment_description', models.TextField()),
                ('recommendations', models.TextField(blank=True, null=True)),
                ('expected_return_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('completed', 'Completed'), ('discontinued', 'Discontinued')], default='active', max_length=20)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='treatment_plans_created_by_set', to=settings.AUTH_USER_MODEL)),
                ('encounter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='treatment_plans', to='clinical_app.encounter')),
            ],
        ),
        migrations.CreateModel(
            name='VisitorEntryExit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('entry', 'Entry'), ('exit', 'Exit')], max_length=5)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('visitor_name', models.CharField(blank=True, help_text='Name of the visitor (if not a registered patient)', max_length=255, null=True)),
                ('visitor_contact', models.CharField(blank=True, help_text='Contact info (e.g., phone number or email) for general visitor', max_length=100, null=True)),
                ('reason_for_visit', models.CharField(blank=True, help_text='e.g., Visiting Patient X, Delivery, Inquiry', max_length=255, null=True)),
                ('notes', models.CharField(blank=True, max_length=255, null=True)),
                ('recorded_by', models.ForeignKey(blank=True, help_text='User who recorded this entry/exit event', limit_choices_to={'user_type__in': ['admin', 'receptionist', 'nurse', 'doctor']}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recorded_visitor_events', to=settings.AUTH_USER_MODEL)),
                ('related_patient', models.ForeignKey(blank=True, help_text='Link to patient record if this visitor is a registered patient', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='visitor_events', to='clinical_app.patient')),
            ],
            options={
                'verbose_name': 'Visitor Event',
                'verbose_name_plural': 'Visitor Events',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='VitalSign',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('temperature', models.DecimalField(blank=True, decimal_places=1, help_text='in Celsius', max_digits=4, null=True)),
                ('blood_pressure_systolic', models.IntegerField(blank=True, help_text='Systolic BP (mmHg)', null=True)),
                ('blood_pressure_diastolic', models.IntegerField(blank=True, help_text='Diastolic BP (mmHg)', null=True)),
                ('heart_rate', models.IntegerField(blank=True, help_text='BPM', null=True)),
                ('respiratory_rate', models.IntegerField(blank=True, help_text='Breaths per minute', null=True)),
                ('oxygen_saturation', models.DecimalField(blank=True, decimal_places=1, help_text='%', max_digits=4, null=True)),
                ('weight_kg', models.DecimalField(blank=True, decimal_places=2, help_text='Weight in KG', max_digits=6, null=True)),
                ('height_cm', models.DecimalField(blank=True, decimal_places=2, help_text='Height in CM', max_digits=6, null=True)),
                ('bmi', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('encounter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vital_signs', to='clinical_app.encounter')),
                ('recorded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='bed',
            name='ward',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='beds', to='clinical_app.ward'),
        ),
        migrations.CreateModel(
            name='MortalityRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(blank=True, help_text='Full name if patient record not linked', max_length=255, null=True)),
                ('date_of_death', models.DateTimeField()),
                ('cause_of_death', models.TextField(help_text='Primary cause of death')),
                ('contributing_factors', models.TextField(blank=True, null=True)),
                ('death_location', models.CharField(blank=True, choices=[('ward', 'In-patient Ward'), ('icu', 'ICU'), ('er', 'Emergency Room'), ('other', 'Other (specify)')], max_length=50, null=True)),
                ('certificate_number', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('reported_date', models.DateTimeField(auto_now_add=True, null=True)),
                ('encounter', models.OneToOneField(blank=True, help_text='Encounter during which death occurred', null=True, on_delete=django.db.models.deletion.SET_NULL, to='clinical_app.encounter')),
                ('patient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='mortality_records', to='clinical_app.patient')),
                ('certified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='clinical_app.doctor')),
            ],
        ),
        migrations.AddField(
            model_name='doctor',
            name='department',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='clinical_app.department'),
        ),
        migrations.CreateModel(
            name='CaseSummary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('summary_text', models.TextField()),
                ('summary_date', models.DateTimeField(auto_now_add=True)),
                ('digital_signature_hash', models.CharField(blank=True, max_length=255, null=True)),
                ('user_signature_image', models.ImageField(blank=True, null=True, upload_to='signatures/case_summaries/')),
                ('user_initials', models.CharField(blank=True, max_length=10, null=True)),
                ('is_signed', models.BooleanField(default=False)),
                ('date_signed', models.DateTimeField(blank=True, null=True)),
                ('signed_by_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='signed_clinical_summaries', to=settings.AUTH_USER_MODEL)),
                ('encounter', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='case_summary', to='clinical_app.encounter')),
                ('prepared_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='clinical_app.doctor')),
            ],
            options={
                'verbose_name_plural': 'Case Summaries',
            },
        ),
        migrations.CreateModel(
            name='BirthRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('baby_name', models.CharField(blank=True, max_length=100, null=True)),
                ('date_of_birth', models.DateTimeField()),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female')], max_length=10)),
                ('weight_kg', models.DecimalField(decimal_places=2, max_digits=5)),
                ('height_cm', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('apgar_score_1min', models.IntegerField(blank=True, null=True)),
                ('apgar_score_5min', models.IntegerField(blank=True, null=True)),
                ('mode_of_delivery', models.CharField(blank=True, max_length=50, null=True)),
                ('delivery_notes', models.TextField(blank=True, null=True)),
                ('is_multiple_birth', models.BooleanField(default=False)),
                ('patient', models.ForeignKey(help_text="Link to the mother's patient record", on_delete=django.db.models.deletion.CASCADE, related_name='birth_records', to='clinical_app.patient')),
                ('delivered_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deliveries', to='clinical_app.doctor')),
            ],
        ),
        migrations.AddField(
            model_name='appointment',
            name='doctor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='clinical_app.doctor'),
        ),
        migrations.CreateModel(
            name='Nurse',
            fields=[
                ('user', models.OneToOneField(limit_choices_to={'user_type': 'nurse'}, on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('nursing_license_number', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('assigned_ward', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='nurses_assigned', to='clinical_app.ward')),
            ],
        ),
        migrations.AddField(
            model_name='encounter',
            name='nurse',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='encounters_managed', to='clinical_app.nurse'),
        ),
        migrations.AddField(
            model_name='bed',
            name='assigned_nurse',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_beds', to='clinical_app.nurse'),
        ),
        migrations.CreateModel(
            name='Prescription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prescription_date', models.DateTimeField(auto_now_add=True)),
                ('dosage', models.CharField(max_length=100)),
                ('frequency', models.CharField(max_length=100)),
                ('duration', models.CharField(max_length=100)),
                ('route', models.CharField(blank=True, choices=[('oral', 'Oral'), ('iv', 'Intravenous (IV)'), ('im', 'Intramuscular (IM)'), ('sc', 'Subcutaneous (SC)'), ('topical', 'Topical'), ('rectal', 'Rectal'), ('vaginal', 'Vaginal'), ('inhalational', 'Inhalational'), ('sublingual', 'Sublingual')], max_length=50, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('is_dispensed', models.BooleanField(default=False)),
                ('dispensed_date', models.DateTimeField(blank=True, null=True)),
                ('encounter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prescriptions', to='clinical_app.encounter')),
                ('medication', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinical_app.medication')),
                ('prescribed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='prescriptions_prescribed_by_set', to=settings.AUTH_USER_MODEL)),
                ('dispensed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='prescriptions_dispensed', to='clinical_app.pharmacist')),
            ],
        ),
        migrations.CreateModel(
            name='CancerRegistryReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_date', models.DateField(default=datetime.date.today)),
                ('cancer_type', models.CharField(max_length=255)),
                ('stage', models.CharField(blank=True, max_length=50, null=True)),
                ('treatment_modalities', models.TextField(blank=True, help_text='e.g., Surgery, Chemotherapy, Radiotherapy', null=True)),
                ('date_of_diagnosis', models.DateField(blank=True, null=True)),
                ('date_of_last_follow_up', models.DateField(blank=True, null=True)),
                ('vital_status', models.CharField(choices=[('alive', 'Alive'), ('dead', 'Dead')], default='alive', max_length=10)),
                ('date_of_death', models.DateField(blank=True, null=True)),
                ('cause_of_death', models.TextField(blank=True, null=True)),
                ('reported_to_registry', models.BooleanField(default=False)),
                ('registry_submission_date', models.DateTimeField(blank=True, null=True)),
                ('diagnosis', models.ForeignKey(blank=True, help_text='Link to the specific cancer diagnosis', null=True, on_delete=django.db.models.deletion.SET_NULL, to='clinical_app.diagnosis')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cancer_registry_reports', to='clinical_app.patient')),
            ],
            options={
                'verbose_name_plural': 'Cancer Registry Reports',
                'unique_together': {('patient', 'diagnosis', 'report_date')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='bed',
            unique_together={('ward', 'bed_number')},
        ),
    ]
